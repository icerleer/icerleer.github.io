<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LOME LEE</title>
  
  <subtitle>LOME LEE BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.lomelee.com/"/>
  <updated>2017-09-01T13:22:05.000Z</updated>
  <id>http://www.lomelee.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java 实现自动锁</title>
    <link href="http://www.lomelee.com/2017/09/01/java-autolock/"/>
    <id>http://www.lomelee.com/2017/09/01/java-autolock/</id>
    <published>2017-09-01T13:22:05.000Z</published>
    <updated>2017-09-01T13:22:05.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>了解自动锁</li></ul><p>很早就受不了 java 锁的机制了,每次都需要在 finally 去解锁, 不仅代码不美观,而且很麻烦</p><p>我想能不能实现加锁之后自动解锁, 如果是C++ 可以利用析构函数实现, 但java就…….</p><p>想了想好像可以利用java7 的 try-with-resource 特性, 对象只需要实现 AutoCloseable 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AutoLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"><span class="comment">// other function start</span></div><div class="line"></div><div class="line"><span class="comment">// ........</span></div><div class="line"></div><div class="line"><span class="comment">// other function end</span></div><div class="line"></div><div class="line"><span class="comment">// I like this feature</span></div><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        unLock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>实现自动锁</li></ul><p>我了解如何利用java特性写一个自动锁那么, 下面我们开始真正的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自动锁实现类</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">// 重入锁对象</span></div><div class="line">    <span class="keyword">private</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 自动锁 加锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动锁本身</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AutoLock <span class="title">lock</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">// 加锁</span></div><div class="line">        reentrantLock.lock();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutoLock <span class="title">getAutoLock</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoLock().lock();</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 自动锁解锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动锁本身</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> AutoLock <span class="title">unLock</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">// 解锁</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != reentrantLock &amp;&amp; reentrantLock.isLocked())</div><div class="line">        &#123;</div><div class="line">            reentrantLock.unlock();           </div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        unLock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简单, 调用示例</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutoLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">try</span>(AutoLock autoLock = <span class="keyword">new</span> AutoLock())</div><div class="line">&#123;</div><div class="line">autoLock.lock()</div><div class="line"><span class="comment">// do some thing.....</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不用再解锁了, 不用再解锁了, 不用再解锁了!!!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 更方便的调用示例</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutoLock</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">// 使用静态方法</span></div><div class="line"><span class="keyword">try</span>(AutoLock autoLock = AutoLock.getAutoLock())</div><div class="line">&#123;</div><div class="line"><span class="comment">// do some thing.....</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 不用再解锁了, 不用再解锁了, 不用再解锁了!!!</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>自动锁的使用场景</li></ul><p>前面两种调用方式, 只是打个比方, 但是很多时候,我们的需求并不是 每次都需要 new ReentrantLock(), 这样并没有什么N用的, 因为每次新的”重入锁”实例, 起不到防止重入的目的, 那我们改变一下方式, 我们做两个地方的改变, 我们修改reentrantLock 成员不做初始化new, 而是通过参数传入Lock 抽象接口对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 自动锁实现类</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">// *重入锁对象 (改变1)*</span></div><div class="line">    <span class="keyword">private</span> Lock autoLock = <span class="keyword">null</span></div><div class="line"></div><div class="line"><span class="comment">// *重写构造函数(改变2)*</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">AutoLock</span><span class="params">(Lock autoLock)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">this</span>.autoLock = autoLock;</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 自动锁 加锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动锁本身</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> AutoLock <span class="title">lock</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">// *加锁(改变3)*</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != reentrantLock)</div><div class="line">        &#123;</div><div class="line">        reentrantLock.lock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="comment">// *获取自动锁对象 (改变4)*</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutoLock <span class="title">getAutoLock</span><span class="params">(Lock autoLock)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutoLock(autoLock).lock();</div><div class="line">&#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 自动锁解锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动锁本身</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> AutoLock <span class="title">unLock</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="comment">// 解锁</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != autoLock)</div><div class="line">        &#123;</div><div class="line">            autoLock.unlock();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        unLock();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至于为什么传入的是 Lock 抽象接口, 因为很所时候,我们可能自定义一个锁对象, 或者以后JDK可能提供的其他锁, 我们来看看调用示例吧<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> class <span class="title">TestService</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">private</span> Lock reentrantLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line"></div><div class="line"><span class="comment">// 假设线程A调用此方法</span></div><div class="line"><span class="function">pubilc <span class="keyword">void</span> <span class="title">testAutoLockA</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">try</span>(AutoLock autoLock = AutoLock.getAutoLock(reentrantLock))</div><div class="line">&#123;</div><div class="line"><span class="comment">// do some thing....</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 假设线程B调用此方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAutoKLockB</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="keyword">try</span>(AutoLock autoLock = AutoLock.getAutoLock(reentrantLock))</div><div class="line">&#123;</div><div class="line"><span class="comment">// do some thing....</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至此我们就实现了,我们假设的常用场景</p><ul><li><p>更高级的用法</p><p>如果我要更细粒度的锁, 不是在对象的成员中存在锁对象,怎么办.<br>我写一个方法, 希望可以帮助大家, 抛砖引玉, 如果可以提供更好的方式请求留言</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Description: TestLock</span></div><div class="line"><span class="comment"> * Created by: IcerLeer</span></div><div class="line"><span class="comment"> * Created on: 2017-08-31 17:42</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockUtils</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line">    <span class="comment">// 自动锁缓存队列, 实现不可重入</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ConcurrentHashMap&lt;String, AutoLock&gt; lockMap = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取自动锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> strKey 自动锁关键字</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回自动锁对象</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutoLock <span class="title">getAutoLock</span><span class="params">(String strKey)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">synchronized</span> (strKey.intern())</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> lockMap.computeIfAbsent(strKey, key -&gt; <span class="keyword">new</span> AutoLock(strKey)).lock();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 移除自动锁</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> strKey 自动锁关键字</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">removeAutoLock</span><span class="params">(String strKey)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        lockMap.remove(strKey);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 自动锁</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AutoLock</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span></span></div><div class="line"><span class="class">    </span>&#123;</div><div class="line">        <span class="comment">// 锁的关键字</span></div><div class="line">        <span class="keyword">private</span> String lockKey = <span class="string">""</span>;</div><div class="line">        <span class="comment">// 事务锁对象</span></div><div class="line">        <span class="keyword">private</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</div><div class="line">        <span class="comment">// 引用计数</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> refNumber = <span class="number">0</span>;</div><div class="line"></div><div class="line">        <span class="comment">// 初始化构造函数</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AutoLock</span><span class="params">(String strKey)</span></span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(strKey))</div><div class="line">            &#123;</div><div class="line">                lockKey = strKey;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 自动锁 加锁</span></div><div class="line"><span class="comment">         * <span class="doctag">@return</span> 返回自动锁本身</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">private</span> AutoLock <span class="title">lock</span><span class="params">()</span></span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="comment">// 增加引用次数</span></div><div class="line">            refNumber++;</div><div class="line">            <span class="comment">// 加锁</span></div><div class="line">            reentrantLock.lock();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line"><span class="comment">         * 自动锁解锁</span></div><div class="line"><span class="comment">         * <span class="doctag">@return</span> 返回自动锁本身</span></div><div class="line"><span class="comment">         */</span></div><div class="line">        <span class="function"><span class="keyword">private</span> AutoLock <span class="title">unLock</span><span class="params">()</span></span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            <span class="comment">// 解锁</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != reentrantLock &amp;&amp; reentrantLock.isLocked())</div><div class="line">            &#123;</div><div class="line">                reentrantLock.unlock();</div><div class="line">                <span class="comment">// 判断是否应该把自动锁移除队列</span></div><div class="line">                <span class="keyword">synchronized</span> (lockKey.intern())</div><div class="line">                &#123;</div><div class="line">                    <span class="comment">// 减少引用次数</span></div><div class="line">                    refNumber--;</div><div class="line">                    <span class="comment">// 如果引用计数</span></div><div class="line">                    <span class="keyword">if</span> (<span class="number">0</span> == refNumber)</div><div class="line">                    &#123;</div><div class="line">                        removeAutoLock(lockKey);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function">        </span>&#123;</div><div class="line">            unLock();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>当然少不了调用示例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testAutoLockA</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">/// "Test" 为锁的关键字, 相同的关键字实现不可重入锁</span></div><div class="line">    <span class="keyword">try</span>(LockUtils.AutoLock autoLock = LockUtils.getAutoLock(<span class="string">"Test"</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// do some thing</span></div><div class="line">sleep(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">testAutoLockB</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"><span class="comment">/// "Test" 为锁的关键字, 相同的关键字实现不可重入锁</span></div><div class="line">    <span class="keyword">try</span>(LockUtils.AutoLock autoLock = LockUtils.getAutoLock(<span class="string">"Test"</span>))</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// do some thing</span></div><div class="line">sleep(<span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;了解自动锁&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;很早就受不了 java 锁的机制了,每次都需要在 finally 去解锁, 不仅代码不美观,而且很麻烦&lt;/p&gt;
&lt;p&gt;我想能不能实现加锁之后自动解锁, 如果是C++ 可以利用析构函数实现, 但java就…….&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lomelee.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="java" scheme="http://www.lomelee.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Electron 开发镜像配置</title>
    <link href="http://www.lomelee.com/2016/11/01/electron-mirror/"/>
    <id>http://www.lomelee.com/2016/11/01/electron-mirror/</id>
    <published>2016-11-01T15:17:55.000Z</published>
    <updated>2016-11-01T15:17:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>electron 开发时, 如果你在国内, 你会痛苦的要死, 因为开发下载很慢或者无法下载, 还好有可爱的NPM 淘宝镜像</p><h2 id="以下两个方案"><a href="#以下两个方案" class="headerlink" title="以下两个方案"></a>以下两个方案</h2><h3 id="1-以下添加以下设置"><a href="#1-以下添加以下设置" class="headerlink" title="1. 以下添加以下设置"></a>1. 以下添加以下设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 注册模块镜像</div><div class="line">npm set registry https://registry.npm.taobao.org </div><div class="line"># node-gyp 编译依赖的 node 源码镜像</div><div class="line">npm set disturl https://npm.taobao.org/dist</div><div class="line"></div><div class="line">## 以下选择添加</div><div class="line"># chromedriver 二进制包镜像</div><div class="line">npm set chromedriver_cdnurl http://cdn.npm.taobao.org/dist/chromedriver </div><div class="line"># operadriver 二进制包镜像</div><div class="line">npm set operadriver_cdnurl http://cdn.npm.taobao.org/dist/operadriver</div><div class="line"># phantomjs 二进制包镜像</div><div class="line">npm set phantomjs_cdnurl http://cdn.npm.taobao.org/dist/phantomjs </div><div class="line"># node-sass 二进制包镜像</div><div class="line">npm set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass </div><div class="line"># electron 二进制包镜像</div><div class="line">npm set electron_mirror http://cdn.npm.taobao.org/dist/electron/</div><div class="line"># 清空缓存</div><div class="line">npm cache clean</div></pre></td></tr></table></figure><h3 id="更方便的设置"><a href="#更方便的设置" class="headerlink" title="更方便的设置"></a>更方便的设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm config set registry https://registry.npm.taobao.org  </div><div class="line">npm config set disturl https://npm.taobao.org/dist</div><div class="line">npm config set NVM_NODEJS_ORG_MIRROR http://npm.taobao.org/mirrors/node  </div><div class="line">npm config set NVM_IOJS_ORG_MIRROR http://npm.taobao.org/mirrors/iojs  </div><div class="line">npm config set PHANTOMJS_CDNURL https://npm.taobao.org/dist/phantomjs  </div><div class="line">npm config set ELECTRON_MIRROR http://npm.taobao.org/mirrors/electron/  </div><div class="line">npm config set SASS_BINARY_SITE http://npm.taobao.org/mirrors/node-sass  </div><div class="line">npm config set SQLITE3_BINARY_SITE http://npm.taobao.org/mirrors/sqlite3  </div><div class="line">npm config set PYTHON_MIRROR http://npm.taobao.org/mirrors/python</div></pre></td></tr></table></figure><h3 id="2-安装-CNPM"><a href="#2-安装-CNPM" class="headerlink" title="2. 安装 CNPM"></a>2. 安装 CNPM</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;electron 开发时, 如果你在国内, 你会痛苦的要死, 因为开发下载很慢或者无法下载, 还好有可爱的NPM 淘宝镜像&lt;/p&gt;
&lt;h2 id=&quot;以下两个方案&quot;&gt;&lt;a href=&quot;#以下两个方案&quot; class=&quot;headerlink&quot; title=&quot;以下两个方案&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lomelee.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="electron" scheme="http://www.lomelee.com/tags/electron/"/>
    
      <category term="mirror" scheme="http://www.lomelee.com/tags/mirror/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 + mysqlcluster 配置部署</title>
    <link href="http://www.lomelee.com/2015/08/12/centos7-mysqlcluster/"/>
    <id>http://www.lomelee.com/2015/08/12/centos7-mysqlcluster/</id>
    <published>2015-08-11T17:12:05.000Z</published>
    <updated>2015-08-11T17:12:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>前后折腾了4天终于把这个东西东西配置好了。吐槽一下，网上的很多资料虽然按照其指定的方法确实可以在CentOS上配置出可用的Mysql Cluster 但是并没有分清管理节点，数据节点，应用节点的目录和区别，如果就这样糊里糊涂的配置，在生产环境估计使用起来够呛。<br>【注：可能是我没有真正理解这些资料，个人意见而已】</p><p> <strong>1. 参数配置</strong></p><p>很多时候我们都参照网上的并不是很官方的资料，而且并不知道很多参数的含义，所以我找了一个比较比错的方法来生成配置参数, mysql官方在 mysql cluster 7.3 后，做了一个自动化部署的工具,工具很不错。官方的视频地址 <a href="http://www.mysql.com/products/cluster/installer.html" target="_blank" rel="external">http://www.mysql.com/products/cluster/installer.html</a></p><p>启动方式在MYSQL Cluster版本的应用SQL节点程序的bin目录下 运行 ndb_setup.py 会自动跳转到web端配置。[前提是要安装Python]</p><p>我并没有用这个工具来真正的部署mysql cluster , 因为部署前需要配置东西较多，而且不利于真正的理解部署环境。所以只用它来获取配置参数(官方的配置放心些， 而且我们可以更改我们的物理机器配置，来获取不同的数据对比各个参数的变化，更好的理解参数的意义)，在部署的过程中我们可以填写物理服务器的配置以及要使用的实时性应用级别，具体的见官方视频介绍</p><p>我生成的配置数据如下（生成后保存此参数为config.ini文件）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">#</div><div class="line"># Configuration file for PaiDB MyCluster</div><div class="line">#</div><div class="line"></div><div class="line">[NDB_MGMD DEFAULT]</div><div class="line">Portnumber=1186</div><div class="line"></div><div class="line">[NDB_MGMD]</div><div class="line">NodeId=49</div><div class="line">HostName=192.168.1.45</div><div class="line">DataDir=/usr/local/paidb/mysqlmgm/mgmdata</div><div class="line">Portnumber=1186</div><div class="line"></div><div class="line">[TCP DEFAULT]</div><div class="line">SendBufferMemory=8M</div><div class="line">ReceiveBufferMemory=8M</div><div class="line"></div><div class="line">[NDBD DEFAULT]</div><div class="line">BackupMaxWriteSize=1M</div><div class="line">BackupDataBufferSize=16M</div><div class="line">BackupLogBufferSize=4M</div><div class="line">BackupMemory=20M</div><div class="line">BackupReportFrequency=10</div><div class="line">MemReportFrequency=30</div><div class="line">LogLevelStartup=15</div><div class="line">LogLevelShutdown=15</div><div class="line">LogLevelCheckpoint=8</div><div class="line">LogLevelNodeRestart=15</div><div class="line">DataMemory=1630M</div><div class="line">IndexMemory=291M</div><div class="line">MaxNoOfTables=4096</div><div class="line">MaxNoOfTriggers=3500</div><div class="line">NoOfReplicas=2</div><div class="line">StringMemory=25</div><div class="line">DiskPageBufferMemory=64M</div><div class="line">SharedGlobalMemory=20M</div><div class="line">LongMessageBuffer=32M</div><div class="line">MaxNoOfConcurrentTransactions=16384</div><div class="line">BatchSizePerLocalScan=512</div><div class="line">FragmentLogFileSize=256M</div><div class="line">NoOfFragmentLogFiles=9</div><div class="line">RedoBuffer=64M</div><div class="line">MaxNoOfExecutionThreads=2</div><div class="line">StopOnError=false</div><div class="line">LockPagesInMainMemory=1</div><div class="line">TimeBetweenEpochsTimeout=32000</div><div class="line">TimeBetweenWatchdogCheckInitial=60000</div><div class="line">TransactionInactiveTimeout=60000</div><div class="line">HeartbeatIntervalDbDb=1500</div><div class="line">HeartbeatIntervalDbApi=1500</div><div class="line"></div><div class="line">[NDBD]</div><div class="line">NodeId=1</div><div class="line">HostName=192.168.1.45</div><div class="line">DataDir=/usr/local/paidb/mysqldata/data1</div><div class="line">BackupDataDir=/usr/local/paidb/mysqldata/backup1</div><div class="line"></div><div class="line">[NDBD]</div><div class="line">NodeId=2</div><div class="line">HostName=192.168.1.40</div><div class="line">DataDir=/var/local/paidb/mysqldata/data2</div><div class="line">BackupDataDir=/usr/local/paidb/mysqldata/backup2</div><div class="line"></div><div class="line">[MYSQLD DEFAULT]</div><div class="line"></div><div class="line">[MYSQLD]</div><div class="line">NodeId=50</div><div class="line">HostName=192.168.1.45</div><div class="line"></div><div class="line">[MYSQLD]</div><div class="line">NodeId=51</div><div class="line">HostName=192.168.1.40</div><div class="line"></div><div class="line">[API]</div><div class="line">NodeId=52</div><div class="line">HostName=192.168.1.45</div><div class="line"></div><div class="line">[API]</div><div class="line">NodeId=53</div><div class="line">HostName=192.168.1.45</div></pre></td></tr></table></figure><p> <strong>2. 配置前准备</strong></p><p>（1）.停止防火墙或者防火墙允许端口1186, 2202, 3306，我为了图方便直接停止防火墙<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld</div><div class="line">systemctl disable firewalld</div></pre></td></tr></table></figure></p><p>（2）.解压 mysql cluster 安装包到目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#把我的安装文件放在了 /usr/src/ 文件夹下面</div><div class="line">#进入此目录解压</div><div class="line">cd /usr/src</div><div class="line">tar -zxf mysql-cluster-7.4.6-linux-glibc2.5-x86_64.tar.gz</div><div class="line">#简化文件夹名称</div><div class="line">mv mysql-cluster-7.4.6-linux-glibc2.5-x86_64 mysqlc</div></pre></td></tr></table></figure></p><p>（3）.在用户目录下新建要安装的管理节点，数据节点，应用节点的目录，我这里他们都放在 /usr/local/paidb/ 目录下，为每台机器创建要勇于服务的节点目录， 由于测试机器有限，我在其中一台服务器配置，管理节点，数据节点1，应用节点1；另一台服务器配置数据节点2，应用节点2；<br>下面是我的节点分配情况”()”号内是目录的名称<br>192.168.1.45 –&gt;管理节点(mysqlmgm) —&gt; 数据节点(mysqldata) —&gt;应用节点(mysqlapp)<br>192.168.1.40 –&gt;数据节点(mysqldata)  —&gt; 应用节点(mysqlapp)</p><p>准备工作做好了接下来我们就来配置各个节点的服务了。</p><p> <strong>3. 配置管理节点</strong></p><p> 在192.168.1.45的服务器上配置管理节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#创建管理节点运行目录和配置完成后的生成文件目录</div><div class="line">mkdir -p /usr/local/paidb/mysqlmgm/bin/config</div><div class="line">#创建管理节点数据目录</div><div class="line">mkdir -p /usr/local/paidb/mysqlmgm/mgmdata</div><div class="line">#进入管理节点目录</div><div class="line">cd /usr/local/paidb/mysqlmgm</div><div class="line">#拷贝管理节点的必要文件到运行目录</div><div class="line">mv /usr/src/mysqlc/bin/ndb_mgmd /usr/local/paidb/mysqlmgm/bin/</div><div class="line">mv /usr/src/mysqlc/bin/ndb_mgm  /usr/local/paidb/mysqlmgm/bin/</div><div class="line"></div><div class="line">#拷贝参数配置文件到管理节点运行目录</div><div class="line">mv /usr/local/paidb/config.ini /usr/local/paidb/mysqlmgm/bin/config.ini</div><div class="line">#把管理节点的运行目录加入环境变量</div><div class="line">vim ~/.bash_profile</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#在PATH变量后面增加&quot;:/usr/local/paidb/mysqlmgm/bin&quot;,如下形式：</div><div class="line">PATH=$PATH:$HOME/bin:/usr/local/paidb/mysqlmgm/bin</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#退出VIM，使用命令，让环境变量立即生效</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure><p>到此管理节点就算配置完成了</p><p><strong>4. 配置数据节点</strong></p><p>分别在192.168.1.45， 192.168.1.40上配置数据节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#192.168.1.45上创建数据节点所需目录</div><div class="line">mkdir -p /usr/local/paidb/mysqldata/bin/</div><div class="line">mkdir /usr/local/paidb/mysqldata/data1</div><div class="line">mkdir /usr/local/paidb/mysqldata/backup1</div><div class="line"></div><div class="line">#192.168.1.40上创建数据节点所需目录</div><div class="line">mkdir -p /usr/local/paidb/mysqldata/bin/</div><div class="line">mkdir /usr/local/paidb/mysqldata/data2</div><div class="line">mkdir /usr/local/paidb/mysqldata/backup2</div><div class="line"></div><div class="line"></div><div class="line">#两台机器上都做以下操作</div><div class="line">#进入数据节点的运行目录</div><div class="line">cd /usr/local/paidb/mysqldata/bin</div><div class="line">#拷贝必要的程序到运行目录</div><div class="line">mv /usr/src/mysqlc/bin/ndbd    /usr/local/paidb/mysqldata/bin/</div><div class="line">mv /usr/src/mysqlc/bin/ndbmtd  /usr/local/paidb/mysqldata/bin/</div></pre></td></tr></table></figure><p>编写配置文件如下，文件命名为：my_data.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[mysql_cluster] </div><div class="line"># Options for data node process: </div><div class="line"># location of management server</div><div class="line">ndb-connectstring=192.168.1.45:1186,</div></pre></td></tr></table></figure></p><p>拷贝 my_data.cnf 文件到 /usr/local/paidb/mysqldata/bin/ 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#把数据节点的运行目录加入环境变量</div><div class="line">vim ~/.bash_profile</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#在PATH变量后面增加&quot;:/usr/local/paidb/mysqldata/bin&quot;;</div><div class="line"># 如下形式：</div><div class="line">PATH=$PATH:$HOME/bin:/usr/local/paidb/mysqlmgm/bin:/usr/local/paidb/mysqldata/bin</div><div class="line"># 或</div><div class="line">PATH=$PATH:$HOME/bin:/usr/local/paidb/mysqldata/bin</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#退出VIM，使用命令，让环境变量立即生效</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure><p>到此两个数据节点配置完成</p><p><strong>5. 配置 mysql 应用节点</strong></p><p>相对复杂一点，接下来看配置<br>分别在192.168.1.45， 192.168.1.40上配置应用节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#创建应用节点所需目录</div><div class="line">mkdir -p /usr/local/paidb/mysqlapp/</div><div class="line">mkdir /usr/local/paidb/mysqlapp/data</div><div class="line">mkdir /usr/local/paidb/mysqlapp/log</div><div class="line">mkdir /usr/local/paidb/mysqlapp/socket</div><div class="line">mkdir /usr/local/paidb/mysqlapp/tmp</div><div class="line"></div><div class="line">#复所需运行文件到应用节点目录</div><div class="line">mv /usr/src/mysqlc    /usr/local/paidb/mysqlapp/app/</div><div class="line"></div><div class="line">#目录转到mysql应用节点运行目录</div><div class="line">cd /usr/local/paidb/mysqlapp/app/</div><div class="line">#创建mysql实例</div><div class="line">./scripts/mysql_install_db --basedir=/usr/local/paidb/mysqlapp/app --datadir=/usr/local/paidb/mysqlapp/data</div><div class="line"># 如果出现:FATAL ERROR: please install the following Perl modules before executing ./scripts/mysql_install_db:Data::Dumper，请安装 perl-module  </div><div class="line">yum install -y perl-Module-Install.noarch  </div><div class="line">#再创建mysql实例</div><div class="line">./scripts/mysql_install_db --basedir=/usr/local/paidb/mysqlapp/app --datadir=/usr/local/paidb/mysqlapp/data</div></pre></td></tr></table></figure></p><p>创建 mysql 应用节点配置文件, 命名问my_app.cnf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[mysqld]</div><div class="line">ndbcluster=on</div><div class="line">port=3306</div><div class="line">log-error=/usr/local/paidb/mysqlapp/mysqld.err</div><div class="line">basedir=/usr/local/paidb/mysqlapp/app</div><div class="line">datadir=/usr/local/paidb/mysqlapp/data</div><div class="line">tmpdir=/usr/local/paidb/mysqlapp/tmp</div><div class="line">ndb-connectstring=192.168.1.45:1186,</div><div class="line">socket=/usr/local/paidb/mysqlapp/socket/mysql.socket</div></pre></td></tr></table></figure></p><p>拷贝 my_app.cnf 文件到 /usr/local/paidb/mysqlapp/app/ 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#把应用节点的运行目录加入环境变量</div><div class="line">vim ~/.bash_profile</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#在PATH变量后面增加&quot;:/usr/local/paidb/mysqlapp/app/bin&quot;;</div><div class="line"># 如下形式：</div><div class="line">PATH=$PATH:$HOME/bin:/usr/local/paidb/mysqlmgm/bin:/usr/local/paidb/mysqldata/bin:/usr/local/paidb/mysqlapp/app/bin</div><div class="line"># 或</div><div class="line">PATH=$PATH:$HOME/bin:/usr/local/paidb/mysqldata/bin:/usr/local/paidb/mysqlapp/app/bin</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#退出VIM，使用命令，让环境变量立即生效</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure><p>到此为止应用节点配置算是完成了。</p><p><strong>6. 运行各个节点服务</strong></p><p>（1）先启动管理节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#第一次启动是使用</div><div class="line">ndb_mgmd -f /usr/local/paidb/mysqlmgm/bin/config.ini --configdir=/usr/local/paidb/mysqlmgm/bin/config --initial</div><div class="line"></div><div class="line">#以后的每一次启动使用</div><div class="line">ndb_mgmd -f /usr/local/paidb/mysqlmgm/bin/config.ini --configdir=/usr/local/paidb/mysqlmgm/bin/config</div></pre></td></tr></table></figure><p>（2）然后启动数据节点</p><p>分别在 192.168.1.45 和 192.168.1.40上执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#第一次启动是使用</div><div class="line">ndbmtd --defaults-file=/usr/local/paidb/mysqldata/bin/my_data.cnf --initial</div><div class="line"></div><div class="line">#以后的每一次启动使用</div><div class="line">ndbmtd --defaults-file=/usr/local/paidb/mysqldata/bin/my_data.cnf</div></pre></td></tr></table></figure><p>（2）最后启动应用节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#创建启动应用节点所需的符号链接</div><div class="line">ln -s /usr/local/paidb/mysqlapp/socket/mysql.socket /tmp/mysql.sock</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#创建mysql用户和组，以启动mysql应用节点服务</div><div class="line">groupadd mysql</div><div class="line">useradd -g mysql -s /usr/sbin/nologin mysql</div><div class="line">#赋值用户和组的权限</div><div class="line">chown -R mysql:mysql /usr/local/paidb</div></pre></td></tr></table></figure><p>制作 mysql 应用节点服务文件，命名为 mysqlapp.service，以便开机启动,  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=mysqlapp -- mysql cluster API </div><div class="line">Before=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">Type=simple</div><div class="line">ExecStart=/usr/local/paidb/mysqlapp/app/bin/mysqld --defaults-file=/usr/local/paidb/mysqlapp/app/my_app.cnf --user=mysql</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=basic.target</div></pre></td></tr></table></figure><p>拷贝此文件到 /usr/lib/systemd/system 目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#启动 mysql cluster 应用节点</div><div class="line">systemctl start mysqlapp</div><div class="line"></div><div class="line">#如果要查看当前应用节点运行状态</div><div class="line">systemctl status mysqlapp</div><div class="line"></div><div class="line">#如果要停止应用节点服务</div><div class="line">systemctl stop mysqlapp</div></pre></td></tr></table></figure><p>到此  mysql cluster 全部部署完成。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前后折腾了4天终于把这个东西东西配置好了。吐槽一下，网上的很多资料虽然按照其指定的方法确实可以在CentOS上配置出可用的Mysql Cluster 但是并没有分清管理节点，数据节点，应用节点的目录和区别，如果就这样糊里糊涂的配置，在生产环境估计使用起来够呛。&lt;br&gt;【注：
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lomelee.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="db" scheme="http://www.lomelee.com/tags/db/"/>
    
      <category term="linux" scheme="http://www.lomelee.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7 firewallD 配置</title>
    <link href="http://www.lomelee.com/2015/06/01/centos7-firewall/"/>
    <id>http://www.lomelee.com/2015/06/01/centos7-firewall/</id>
    <published>2015-06-01T12:00:12.000Z</published>
    <updated>2015-06-01T12:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="FirewallD-构建简单配置"><a href="#FirewallD-构建简单配置" class="headerlink" title="FirewallD 构建简单配置"></a>FirewallD 构建简单配置</h4><p>比如，要启用或禁用 HTTP 服务： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-service=http --permanent</div><div class="line">firewall-cmd --zone=public --remove-service=http --permanent</div></pre></td></tr></table></figure><p>比如：允许或者禁用 12345 端口的 TCP 流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=12345/tcp --permanent</div><div class="line">firewall-cmd --zone=public --remove-port=12345/tcp --permanent</div></pre></td></tr></table></figure><h4 id="FirewallD-构建规则集"><a href="#FirewallD-构建规则集" class="headerlink" title="FirewallD 构建规则集"></a>FirewallD 构建规则集</h4><p>允许来自主机 192.168.0.* 的所有 IPv4 流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=192.168.0.0/24 accept&apos;</div></pre></td></tr></table></figure><p>拒绝来自主机 192.168.1.10 到 22 端口的 IPv4 的 TCP 流量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-rich-rule &apos;rule family=&quot;ipv4&quot; source address=&quot;192.168.1.10&quot; port port=22 protocol=tcp reject&apos;</div></pre></td></tr></table></figure><p>允许来自主机 10.1.0.3 到 80 端口的 IPv4 的 TCP 流量，并将流量转发到 6532 端口上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-rich-rule &apos;rule family=ipv4 source address=10.1.0.3 forward-port port=80 protocol=tcp to-port=6532&apos;</div></pre></td></tr></table></figure><p>允许UDP组播通过防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -m pkttype --pkt-type multicast -j ACCEPT</div><div class="line">firewall-cmd --permanent --direct --add-rule ipv6 filter INPUT 0 -m pkttype --pkt-type multicast -j ACCEPT</div></pre></td></tr></table></figure><h4 id="重新加载-Firewall-使配置生效"><a href="#重新加载-Firewall-使配置生效" class="headerlink" title="重新加载 Firewall 使配置生效"></a>重新加载 Firewall 使配置生效</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;FirewallD-构建简单配置&quot;&gt;&lt;a href=&quot;#FirewallD-构建简单配置&quot; class=&quot;headerlink&quot; title=&quot;FirewallD 构建简单配置&quot;&gt;&lt;/a&gt;FirewallD 构建简单配置&lt;/h4&gt;&lt;p&gt;比如，要启用或禁用 HTTP
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lomelee.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="http://www.lomelee.com/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="centos" scheme="http://www.lomelee.com/tags/centos/"/>
    
      <category term="linux" scheme="http://www.lomelee.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>UDP 组播 以及 UDP面向有连接</title>
    <link href="http://www.lomelee.com/2013/07/11/udpconn/"/>
    <id>http://www.lomelee.com/2013/07/11/udpconn/</id>
    <published>2013-07-11T13:45:13.000Z</published>
    <updated>2013-06-01T13:45:13.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="组播IP地址的使用范围规定"><a href="#组播IP地址的使用范围规定" class="headerlink" title="组播IP地址的使用范围规定"></a>组播IP地址的使用范围规定</h4><p>组播报文的目的地址使用 d 类 ip 地址，d 类地址不能出现在 ip 报文的源 ip 地址字段。 </p><p>范围是从 224.0.0.0 到 239.255.255.255。</p><p>其中 224.0.0.0～224.0.0.255 为预留的组播地址（永久组地址） 只能用于局域网中，路由器是不会转发的地址。</p><p>224.0.0.0 保留不做分配，其它地址供路由协议使用。</p><p>224.0.1.0～238.255.255.255 为用户可用的组播地址（临时组地址），可以用于 Internet 上的。</p><p>239.0.0.0～239.255.255.255 为本地管理组播地址，仅在特定的本地范围内有效。</p><h4 id="UDP-进行-connect-面向连接"><a href="#UDP-进行-connect-面向连接" class="headerlink" title="UDP 进行 connect (面向连接)"></a>UDP 进行 connect (面向连接)</h4><p>UDP也是一样可以进行connect的，和TCP的区别在于没有三次握手而已，<br>但是同样也是可以使用send,recv来进行同通信，并且这么做还有一些其他的好处，<br>这些内容在《UNIX网络编程》里说得很清楚，这里我就不细说，只是稍微提一下UDP进行了connect连接的好处， </p><p>在末连接UDP套接字上给两个数据报调用函数sendto导致内核执行下列六步： </p><ul><li>1.连接套接字； </li><li>2.输出第一个数据报 </li><li>3.断开套接字连接； </li><li>4.连接套接字， </li><li>5.输出第二个数据报； </li><li>6.断开套接字连接 </li></ul><p>已连接套接字发送两个数据报的导致内核执行如下步骤； </p><ul><li>1.连接套接字； </li><li>2.输出第一个数据报； </li><li>3.输出第二个数据报。 </li></ul><p>对同一套接字发送时，某种程度上来讲，耗时减少1/3 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;组播IP地址的使用范围规定&quot;&gt;&lt;a href=&quot;#组播IP地址的使用范围规定&quot; class=&quot;headerlink&quot; title=&quot;组播IP地址的使用范围规定&quot;&gt;&lt;/a&gt;组播IP地址的使用范围规定&lt;/h4&gt;&lt;p&gt;组播报文的目的地址使用 d 类 ip 地址，d 类地
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lomelee.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="net" scheme="http://www.lomelee.com/tags/net/"/>
    
      <category term="c++" scheme="http://www.lomelee.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>理解字符集和编码</title>
    <link href="http://www.lomelee.com/2011/05/01/chartset/"/>
    <id>http://www.lomelee.com/2011/05/01/chartset/</id>
    <published>2011-05-01T10:02:05.000Z</published>
    <updated>2011-05-01T10:02:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理解字符集和编码"><a href="#理解字符集和编码" class="headerlink" title="理解字符集和编码"></a>理解字符集和编码</h2><p>  工作中一直遇到这样字符编码的问题, 做了写个总结, 方便理解</p><ul><li>字符集<br>字符集顾名思义，是表示字符的集合。</li></ul><ul><li>编码<br>对字符集的编码。</li></ul><ul><li>什么时候说编码<br>字符串本身不存在什么编码<br>当这个字符串要被存储或者在网络上传递，需要转成二进制的字节流，这时候才会使用到UTF-8,GBK这些编码。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;理解字符集和编码&quot;&gt;&lt;a href=&quot;#理解字符集和编码&quot; class=&quot;headerlink&quot; title=&quot;理解字符集和编码&quot;&gt;&lt;/a&gt;理解字符集和编码&lt;/h2&gt;&lt;p&gt;  工作中一直遇到这样字符编码的问题, 做了写个总结, 方便理解&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="技术" scheme="http://www.lomelee.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="web" scheme="http://www.lomelee.com/tags/web/"/>
    
  </entry>
  
</feed>
